@implements IDisposable
@page "/"
@inject WeatherService WeatherService

<PageTitle>Index</PageTitle>
<div class="index">
    <Banner MainForecast="@State?.AppState?.List?[0]"  />
    <ForeCast forecast="@State?.AppState?.List" />
</div>

@code {
    [CascadingParameter]
    public CascadingAppStateProvider? State { get; set; }
    protected override async Task OnInitializedAsync() // use async Task instead of void
    {
        State!.AppState!.StateChanged += async (source, property) => await OnStateChanged(source, property); // use a lambda expression
        await OnStateChanged(this, "SearchInput"); // call OnStateChanged with "SearchInput" as the property argument
    }

    private async Task OnStateChanged(ComponentBase source, string property)
    {
        if (property == "SearchInput")
        {
            try
            {
                // Get the latitude and longitude for the city
                var (lat, lon) = await WeatherService.GetLatLonAsync(State!.AppState!.SearchInput);

                // Get the forecast for the latitude and longitude
                var  forecast = await WeatherService.GetForecastAsync(lat,lon);

                Console.WriteLine(forecast);

                // Update the app state with the forecast
                State.AppState.UpdateForecast(this, forecast);
            }
            catch (Exception ex)
            {
                // Display an error message
                Console.WriteLine(ex.Message);
            }
        // Update the UI
        StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
       State!.AppState!.StateChanged -= async (source, property) => await OnStateChanged(source, property); // use a lambda expression

    }
}
