@page "/"
@inject WeatherService WeatherService

<PageTitle>Index</PageTitle>
<div class="index">
    <Banner />
    <ForeCast />
</div>

@code {
    [CascadingParameter]
    public CascadingAppStateProvider? State { get; set; }
    protected override void OnInitialized()
    {
        State!.AppState!.StateChanged += OnStateChanged;
    }

    private async void OnStateChanged(ComponentBase source, string property)
{
    if (property == "SearchInput")
    {
        try
            {
                // Get the latitude and longitude for the city
                var (lat, lon) = await WeatherService.GetLatLonAsync(State!.AppState!.SearchInput);

                // Get the forecast for the latitude and longitude
                var forecast = await WeatherService.GetForecastAsync(lat, lon);

                Console.WriteLine(forecast);

                // Update the app state with the forecast
                State.AppState.UpdateForecast(this, forecast);
            }
            catch (Exception ex)
            {
                // Display an error message
                Console.WriteLine(ex.Message);
            }
        // Update the UI
        StateHasChanged();
    }
}

    @* private async Task GetForecastAsync()
        {
            try
            {
                // Get the latitude and longitude for the city
                var (lat, lon) = await WeatherService.GetLatLonAsync(State!.AppState!.SearchInput);

                // Get the forecast for the latitude and longitude
                var forecast = await WeatherService.GetForecastAsync(lat, lon);

                // Update the app state with the forecast
                State.AppState.UpdateForecast(this, forecast);
            }
            catch (Exception ex)
            {
                // Display an error message
                Console.WriteLine(ex.Message);
            }
        } *@

}